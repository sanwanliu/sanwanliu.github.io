{"pages":[],"posts":[{"title":"17.树和图","text":"树树是特殊化的链表 无单个子节点–完全二叉树 二叉搜索树也称有序二叉树，排序二叉树，是指一颗空树或者具有下列性质的二叉树： 左子树上所有节点的值均小于他的根节点（!!!注意：是左右子树，不是左儿子右儿子） 右子树上所有节点的值均大于他的根节点 递推地，左右子树也分别为二叉查找树 查找的平均时间复杂度为从O(n)变为O(logn),最坏情况(只有右子树)退化为O(n); 平衡二叉树,如红黑树,avl树,kd树最坏情况为O(logn) 图 图是特殊化的树指回根节点–图","link":"/2019/07/19/17-树和图/"},{"title":"19.二叉树_最近公共祖先:leetcode236","text":"problemGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” Given the following binary tree: root = [3,5,1,6,2,0,8,null,null,7,4] Example 1: 123Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1Output: 3Explanation: The LCA of nodes 5 and 1 is 3. Example 2: 12Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4Output: 5 Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition. Note: All of the nodes’ values will be unique. p and q are different and both values will exist in the binary tree. approach 1:递归算法12345678910111213141516171819class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if (root == null || p == root || q == root) { return root; } TreeNode leftResult = lowestCommonAncestor(root.left, p, q); TreeNode rightResult = lowestCommonAncestor(root.right, p, q); if (leftResult != null &amp;&amp; rightResult != null) { return root; } if (leftResult == null) { return rightResult; } if (rightResult == null) { return leftResult; } return null; }} 复杂度 time:O(n) space:O(n)","link":"/2019/07/19/19-二叉树_最近公共祖先:leetcode236/"},{"title":"19.二叉搜索树_最近公共祖先:leetcode235","text":"problemGiven a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5] Example 1: 123Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8Output: 6Explanation: The LCA of nodes 2 and 8 is 6. Example 2: 123Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4Output: 2Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. Note: All of the nodes’ values will be unique. p and q are different and both values will exist in the BST. 初步分析: 1.分别得到两个节点的路径,再比较路径 approach 1:递归12345678910111213141516171819202122232425/* * @lc app=leetcode id=235 lang=java * * [235] Lowest Common Ancestor of a Binary Search Tree *//** * Definition for a binary tree node. public class TreeNode { int val; TreeNode * left; TreeNode right; TreeNode(int x) { val = x; } } */class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if (root == null || p == null || q == null) { return null; } if (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) { return lowestCommonAncestor(root.left, p, q); } if (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) { return lowestCommonAncestor(root.right, p, q); } return root; }} 如果p和q都大于root，去左子树找；如果p和q都小于root，去右子树找；否则，p和q进行分叉，root就是要找的节点 非递归版本： 1234567891011121314class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { while (root != null) { if (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) { root = root.left; } else if (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) { root = root.right; } else { break; } } return root; }} 复杂度 time:O(n) space:O(n)","link":"/2019/07/19/19-二叉搜索树-最近公共祖先-leetcode235/"},{"title":"20.二叉树的遍历","text":"123456789101112131415public class preorder{ private List&lt;TreeNode&gt; list; public List&lt;TreeNode&gt; inorder(TreeNode root){ if(root ==null){ return null; } inorder(root.left); list.add(root); inorder(root.right); return list; }}","link":"/2019/07/19/20-二叉树的遍历/"},{"title":"18.验证二叉搜索树:leetcode-98 Search Tree","text":"problemGiven a binary tree, determine if it is a valid binary search tree (BST). Assume a BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node’s key.The right subtree of a node contains only nodes with keys greater than the node’s key.Both the left and right subtrees must also be binary search trees. Example 1: 123456 2 / \\ 1 3Input: [2,1,3]Output: true Example 2: 12345678 5 / \\ 1 4 / \\ 3 6Input: [5,1,4,null,null,3,6]Output: false Explanation: The root node’s value is 5 but its right child’s value is 4. approach 1:中序遍历遍历后存到array,判断array是否为升序 算法1234567891011121314151617181920212223242526class Solution { public boolean isValidBST(TreeNode root) { if (root == null) { return true; } List&lt;TreeNode&gt; list = inorder(root, new ArrayList&lt;TreeNode&gt;()); for (int i = 0; i &lt; list.size()-1; i++) { if (list.get(i).val &gt;= list.get(i + 1).val) { return false; } } return true; } private List&lt;TreeNode&gt; inorder(TreeNode root, ArrayList&lt;TreeNode&gt; list) { if (root == null) { return list; } inorder(root.left, list); list.add(root); return inorder(root.right, list); }} 123456789101112131415161718192021/* 中序遍历,在比较中返回 */class Solution { TreeNode pre; public boolean isValidBST(TreeNkkode root) { if (root == null) { return true; } if(!isValidBST(root.left)){ return false; } if (pre != null &amp;&amp; root.val &lt;= pre.val) { return false; }kk pre = root; if(!isValidBST(root.right)){ return false; } return true; }} 复杂度 time:O(n) space:O(n) approach 2:递归根据定义,对于左边的右边节点,他的下界是根节点,上界是父节点;右边的左边节点的下界是父节点,上界是父节点 算法1234567891011121314151617181920212223242526class Solution { public boolean isValidBST(TreeNode root) { return helper(root, Long.MIN_VALUE, Long.MAX_VALUE); } private boolean helper(TreeNode root, long min, long max) { if (root == null) { return true; } if (!helper(root.left, min, root.val)) { return false; } if (root.val &lt;= min || root.val &gt;= max) { return false; } if (!helper(root.right, root.val, max)) { return false; } return true; }} 12345678910111213141516171819202122class Solution { public boolean isValidBST(TreeNode root) { return helper(root, null, null); } private boolean helper(TreeNode root, Integer min, Integer max) { if (root == null) { return true; } if ((min != null &amp;&amp; root.val &lt;= min)) { return false; } if (max != null &amp;&amp; root.val &gt;= max) { return false; } return helper(root.left, min, root.val) &amp;&amp; helper(root.right, root.val, max); }} 复杂度 time:O(n) space:O(n)","link":"/2019/07/19/18-验证二叉搜索树:leetcode-98/"},{"title":"23.分治：leetcode-169","text":"problemGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times. You may assume that the array is non-empty and the majority element always exist in the array. Example 1: 123456Input: [3,2,3]Output: 3Example 2:Input: [2,2,1,1,1,2,2]Output: 2 approach1:123456class Solution { public int majorityElement(int[] nums) { Arrays.sort(nums); return nums[nums.length / 2]; }} 复杂度 time:O(nlogn) space:O(1) approach2:12345678910111213141516171819class Solution { public int majorityElement(int[] nums) { HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); int res = 0; for (int num : nums) { if (!map.containsKey(num)) { map.put(num, 1); } else { map.put(num, map.get(num) + 1); } if (map.get(num) &gt; nums.length / 2) { res = num; break; } } return res; }} 复杂度 time:O(n) space:O(n) approach3:12345678910111213141516171819// 每次都找出一对不同的元素，从数组中删掉，直到数组为空或只有一种元素。// 不难证明，如果存在元素e出现频率超过半数，那么数组中最后剩下的就只有e。// [1,2,3,3,3]class Solution { public int majorityElement(int[] nums) { int res = 0; int count = 0; for (int num : nums) { if (count == 0) { res = num; } if (res != num) { count--; } else count++; } return res; }} 复杂度 time:O(n) space:O(1) approach4:分治算法","link":"/2019/09/17/23-分治：leetcode-169-1/"},{"title":"29.二叉树的最大深度:leetcode104","text":"problemGiven a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Note: A leaf is a node with no children. 12345678910Example:Given binary tree [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7return its depth = 3. approach1:深度优先 123456789class Solution { public int maxDepth(TreeNode root) { if (root == null) { return 0; } return 1 + Math.max(maxDepth(root.left), maxDepth(root.right)); }} 复杂度 time:O(n) space:O(n)","link":"/2019/09/17/29-二叉树的最大深度-leetcode104/"},{"title":"25.贪心算法:leetcode122","text":"problemSay you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). 123456789101112131415161718Example 1:Input: [7,1,5,3,6,4]Output: 7Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.Example 2:Input: [1,2,3,4,5]Output: 4Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.Example 3:Input: [7,6,4,3,1]Output: 0Explanation: In this case, no transaction is done, i.e. max profit = 0. approach1:1234567891011class Solution { public int maxProfit(int[] prices) { int profit = 0; for (int i = 0; i &lt; prices.length - 1; i++) { if (prices[i + 1] &gt; prices[i]) { profit += prices[i + 1] - prices[i]; } } return profit; }} 复杂度 time:O(n) space:O(1) approach2:12 复杂度 time:O() space:O() approach3:12 复杂度 time:O() space:O()","link":"/2019/09/17/25-贪心算法-leetcode122/"},{"title":"29.二叉树的最小深度:leetcode111","text":"problemGiven a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. Note: A leaf is a node with no children. 12345678910Example:Given binary tree [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7return its minimum depth = 2. approach1:12345678910111213class Solution { public int minDepth(TreeNode root) { if (root == null) { return 0; } if (root.left == null || root.right == null) { return Math.max(minDepth(root.left), minDepth(root.right)) + 1; } return Math.min(minDepth(root.left), minDepth(root.right)) + 1; }} 复杂度 time:O(n) space:O(n)","link":"/2019/09/17/29-二叉树的最小深度-leetcode111/"},{"title":"21.递归和分治:leetcode-50","text":"Implement pow(x, n). eg. 2^2 = 2^1 * 2^1 = (2^0 * 2^0 * 2) * (2^0 * 2^0 * 2) = (1 * 1 * 2) * (1 * 1 * 2) = 4 eg. 2^3 = 2^1 * 2^1 * 2 = (2^0 * 2^0 * 2) * (2^0 * 2^0 * 2) * 2 = (1 * 1 * 2) * (1 * 1 * 2) * 2 = 8 注意：负数的int的取值范围为-2^31~2^31-1,如果直接使用-n会导致栈溢出 approach1123456789101112131415161718class Solution { public double myPow(double x, int n) { return pow(x, n); } private static double pow(double x,long n) { if (n == 0) { return 1; } if (n &lt; 0) { return 1 / pow(x, -n); } if (n % 2 == 1) { return x * pow(x * x, n / 2); } return pow(x * x, n / 2); }} time: O(logn)space: O(logn) approach2123456789101112131415161718public static double myPow2(double x, int n) { if (n == 0) return 1; double res = 1; // int : -6.. ~ +6.. -2^32 ~ 2 ^32-1 Integer.MIN_VALUE long abs = Math.abs((long)n); while (abs &gt; 0) { if (abs % 2 != 0) { res *= x; } x *= x; abs /= 2; } if (n &lt; 0) { return 1.0 / res; } return res;} time: O(logn)space: O(1)","link":"/2019/09/05/21-递归和分治/"},{"title":"26.广度优先&深度优先","text":"广度优先 深度优先","link":"/2019/09/17/26-广度优先-深度优先/"},{"title":"35.二分查找：leetcode69","text":"1234567891011left, right =0, len(array) - 1while left &lt;= right: mid = left + (right - left)/2 if array[mid] == target: //find the target break or return result elif array[mid] &lt; target: left = mid + 1 else: right = mid - 1 problemImplement int sqrt(int x). approach1单调递增可以用二分法 12 time:O() space:O() approach212 time:O() space:O() approach312 time:O() space:O() summery","link":"/2019/09/18/35-二分查找：leetcode69/"},{"title":"Fibonacci","text":"斐波那契递归F(n) = F(n-1) + F(n-2) 1234def fib(n): if n==0 or n==1: return n return fib(n-1) + fib(n-2) 时间复杂度2^n 主定律 算法 时间 二分查找 O(logn) 二叉树遍历 O(n) 快速排序/归并排序 O(nlog(n))","link":"/2019/07/09/Fibonacci/"},{"title":"Java多线程和并发-原理","text":"synchronized线程安全的主要诱因 存在共享数据 存在多条线程共同操作这些共享数据 根本方法:同一时刻有且只有一个线程在操作共享数据,其他线程必须等到该线程处理完数据后再对共享数据进行操作 互斥锁的特性 互斥性:同一时间只允许一个线程持有某个对象锁 可见性:锁被释放前,对共享变量所做的修改,对于随后获得该锁的线程是可见的 synchronized锁的是对象而不是代码 获取的锁的分类:获取对象锁和获取类锁获取对象锁的两种方法: 同步代码块,synchronized(this),synchronized(类实例对象) 同步非静态方法(synchronized method),锁的是当前对象的实例对象 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192public class SyncThread implements Runnable { @Override public void run() { String threadName = Thread.currentThread().getName(); if (threadName.startsWith(\"A\")) { async(); } else if (threadName.startsWith(\"B\")) { syncObjectBlock1(); } else if (threadName.startsWith(\"C\")) { syncObjectMethod1(); } else if (threadName.startsWith(\"D\")) { syncClassBlock1(); } else if (threadName.startsWith(\"E\")) { syncClassMethod1(); } } /** * 异步方法 */ private void async() { try { System.out.println(Thread.currentThread().getName() + \"_Async_Start: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); Thread.sleep(1000); System.out.println(Thread.currentThread().getName() + \"_Async_End: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); } catch (InterruptedException e) { e.printStackTrace(); } } /** * 方法中有 synchronized(this|object) {} 同步代码块 */ private void syncObjectBlock1() { System.out.println(Thread.currentThread().getName() + \"_SyncObjectBlock1: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); synchronized (this) { try { System.out.println(Thread.currentThread().getName() + \"_SyncObjectBlock1_Start: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); Thread.sleep(1000); System.out.println(Thread.currentThread().getName() + \"_SyncObjectBlock1_End: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); } catch (InterruptedException e) { e.printStackTrace(); } } } /** * synchronized 类锁 */ private synchronized void syncObjectMethod1() { System.out.println(Thread.currentThread().getName() + \"_SyncObjectMethod1: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); try { System.out.println(Thread.currentThread().getName() + \"_SyncObjectMethod1_Start: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); Thread.sleep(1000); System.out.println(Thread.currentThread().getName() + \"_SyncObjectMethod1_End: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); } catch (InterruptedException e) { e.printStackTrace(); } } /** * synchronized 修饰非静态方法 */ private void syncClassBlock1() { System.out.println(Thread.currentThread().getName() + \"_SyncClassBlock1: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); synchronized (SyncThread.class) { try { System.out.println(Thread.currentThread().getName() + \"_SyncClassBlock1_Start: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); Thread.sleep(1000); System.out.println(Thread.currentThread().getName() + \"_SyncClassBlock1_End: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); } catch (InterruptedException e) { e.printStackTrace(); } } } /** * synchronized 修饰静态方法 */ private synchronized static void syncClassMethod1() { System.out.println(Thread.currentThread().getName() + \"_SyncClassMethod1: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); try { System.out.println(Thread.currentThread().getName() + \"_SyncClassMethod1_Start: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); Thread.sleep(1000); System.out.println(Thread.currentThread().getName() + \"_SyncClassMethod1_End: \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date())); } catch (InterruptedException e) { e.printStackTrace(); } }} 对象锁和类锁的总结 synchronized底层实现原理实现synchronized的基础 Java对象头 对象在内存中的布局(对象头,实例数据,对齐填充) Monitor 每个Java对象天生自带了一把看不见的锁,存在Java对象的对象头中 ObjectMonitor实现: 每个对象锁的线程会被封装成ObjectWaiter存入EntryList synchronized历史 自旋锁:等待锁释放,不让出cpu 自适应自旋锁:自旋锁线程的等待时间和次数不固定 锁消除 锁粗化 synchronized的四种状态 synchronized和reentrantLockReentrantLock(再入锁) synchronized和reentrantLock公平性的设置 1234567891011121314151617181920212223242526public class ReentrantLockDemo implements Runnable{ private static ReentrantLock lock = new ReentrantLock(false); @Override public void run(){ while (true){ try{ lock.lock(); System.out.println(Thread.currentThread().getName() + &quot; get lock&quot;); Thread.sleep(1000); } catch (Exception e){ e.printStackTrace(); } finally { lock.unlock(); } } } public static void main(String[] args) { ReentrantLockDemo rtld = new ReentrantLockDemo(); Thread thread1 = new Thread(rtld); Thread thread2 = new Thread(rtld); thread1.start(); thread2.start(); }}//输出交替 总结 JMM的内存可见性java内存模型内存模型规定了多线程程序读写操作规范 java内存模型(java memory model)描述的是一组规范,定义了程序中各个变量的访问方式 线程对变量的操作必须在本地内存中执行,线程先把变量从主内存拷贝到工作内存,然后对变量进行操作,再拷贝到主内存中,线程之间的通信必须通过主内存 JMM中的主内存 存储Java实例对象 包括成员变量,类信息,常量,静态变量等 属于数据共享的区域,多线程并发操作时会引发线程安全问题 JMM中的工作内存 储存当前方法的所有本地变量信息,#本地变量对其他线程不可见 字节码行号指示器,Native方法信息 数据线程私有数据区域,不存在线程安全问题 JMM与java内存划分是不同的概念层次 JMM描述的是一组规则,围绕原子性,有序性,可见性展开 相似点:存在共享区域和私有区域 主内存与工作内存的数据存储类型以及操作方式归纳 方法里的基本数据类型本地变量将直接存储在工作内存的栈帧结构中 引用类型的本地变量:引用存储在工作内存中,实例存储在主内存中 成员变量,static变量,类信息均会被储存到主内存中 主内存共享的方式是线程各拷贝一份数据到工作内存中,操作完成后再刷新回主内存 JMM怎么解决可见性问题 指令重新排序需要满足的条件 A操作的结果对B操作可见,则A与B存在happens-before的关系 happens-before的概念 volatile:JVM提供的轻量级同步机制 volatile修饰的变量对所有线程总是可见的 禁止指令重排 多线程操作可能引发线程安全=&gt; synchronized也具有可见性,可以省略volatile=&gt; volatile如何实现可见性 volatile如何禁止重排优化-（内存屏障，以及保证内存可见性） 单例是双重检测实现123456789101112131415161718192021222324252627282930public class Singleton{ // 所以要加volatile关键字 private volatile static Singleton instance; private Singleton(){} public static Singleton getInstance(){ //问题:Ａ判断为空后进入但还未实例化Ｂ也判断为空 if(intstance==null){ instance=new Singleton(); } //问题：AB都判断为空，A先实例化，B拿到锁又实例化 if(instance==null){ synchronized(Singleton.class){ instance=new Singleton(); } } //问题：1.指令重排后,线程A未初始化对象,但instance指向了刚分配的内存空间,instance!=null,B线程可能拿到一个未成品 2:线程A初始化完对象,但还未刷入主存,线程B可能还会初始化一个实例 if(instance==null){ synchronized(Singleton.class){ if(instance==null){ instance= new Singleton(); } } } }} CAS(Compare and Swap) java线程池利用Executors创建不同的线程池满足不同场景的需求 使用双端队列实现 为什么要使用线程池 降低资源消耗 提高线程的可管理性 Executor的框架 线程池的基本组成: corePoolSize:核心线程数量(长期驻留的线程数) maximumPoolSize:线程不够用时能创建的最大线程数 workQueue:任务等待队列 keepAliveTime:非核心线程等待时间 threadFactory:创建新线程 handler:线程池饱和策略(阻塞队列满了并且没有空闲线程) 线程池的状态 流程图 生命周期 线程池的大小如何选定","link":"/2019/07/26/Java多线程和并发-原理/"},{"title":"Java多线程和并发","text":"进程和线程的区别//TODO linux用户态和内核态是如何进行转换,为什么要转换,什么是系统中断,它的内核态的多线程是如何通过轻量级线程方式实现 线程和进程的由来 线程和进程的区别进程是资源分配的最小单位,线程是CPU调度的最小单位 所有进程相关资源都被记录在PCB(进程控制块)中 进程是抢占处理机的调度单位;线程属于某个进程,共享其资源 线程只由堆栈寄存器,程序计数器和线程控制块TCB组成 总结 java进程和线程的关系 一个程序是一个可执行的文件,一个进程是一个执行中的程序的实例.jvm是多线程的,如垃圾收集器的线程 线程的start和run方法的区别1234567891011121314151617public class ThreadTest { private static void attack() { System.out.println(&quot;fight&quot;); System.out.println(&quot;current thread is:&quot; + Thread.currentThread().getName()); } public static void main(String[] args) { Thread t = new Thread() { public void run() { attack(); } }; System.out.println(&quot;current main thread is:&quot; + Thread.currentThread().getName());// t.run();//main t.start();//thread-0 } run方法只是Thread的一个普通方法的调用,还是在主线程里执行 调用start方法会创建一个新的子线程 Thread和Runnable是什么关系1234567891011121314151617181920212223242526public class ThreadDemo { public static void main(String[] args) { MyThread mt1 = new MyThread(&quot;thread1&quot;); MyThread mt2 = new MyThread(&quot;thread2&quot;); MyThread mt3 = new MyThread(&quot;thread3&quot;); mt1.start(); mt2.start(); mt3.start(); }}public class MyThread extends Thread { private String name; public MyThread(String name) { this.name = name; } @Override public void run() { for (int i = 0; i &lt; 10; i++) { System.out.println(&quot;Thread start:&quot; + this.name + &quot;,i=&quot; + i); } }}//输出是交替执行的,说明是多线程 12345678910111213141516171819202122232425262728public class RunnableDemo { public static void main(String[] args) { MyRunnable mr1 = new MyRunnable(&quot;runnable1&quot;); MyRunnable mr2 = new MyRunnable(&quot;runnable2&quot;); MyRunnable mr3 = new MyRunnable(&quot;runnable3&quot;); Thread t1 = new Thread(mr1); Thread t2 = new Thread(mr2); Thread t3 = new Thread(mr3); t1.start(); t2.start(); t3.start(); }}public class MyRunnable implements Runnable { private String name; public MyRunnable(String name) { this.name = name; } @Override public void run() { for (int i = 0; i &lt; 10; i++) { System.out.println(&quot;Thread start:&quot; + this.name + &quot;,i=&quot; + i); } }}//输出是交替执行的,说明是多线程 Thread是一个实现了Runnable的类,使得run支持多线程 因类的单一继承原则,推荐使用Runnable接口 如何给run()方法传参 如何实现处理线程的返回值（主线程等待，join，callable，线程池） 1.主线程等待 1234567891011121314151617181920212223242526public class CycleWait implements Runnable { private String val; @Override public void run() { try { Thread.currentThread().sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } val = &quot;we have data now&quot;; } public static void main(String[] args) throws InterruptedException { CycleWait cw = new CycleWait(); Thread t = new Thread(cw); t.start(); while (cw.val == null) { Thread.currentThread().sleep(100); } //t.join(); System.out.println(cw.val); }} 2.使用Thread类的join()阻塞当前线程以等待子线程处理完毕(无法更精细) 缺点:无法更精细,如上例中多个Runnable,无法做到当Runnable1的i=5 再执行Runnable2 3.通过Callable借口实现:通过FutureTask Or 线程池获取 12345678910public class MyCallable implements Callable&lt;String&gt; { @Override public String call() throws Exception { String val = &quot;test&quot;; System.out.println(&quot;ready to work&quot;); Thread.currentThread().sleep(4000); System.out.println(&quot;Work is done&quot;); return val; }} 1234567891011121314151617方式1:通过FutureTaskpublic class FutureTaskDemo { public static void main(String[] args) throws ExecutionException, InterruptedException { FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(new MyCallable()); new Thread(futureTask).start(); if (!futureTask.isDone()) { System.out.println(&quot;Please wait&quot;); } System.out.println(&quot;Task return:&quot; + futureTask.get()); }}输出:Please waitready to workWork is doneTask return:test 12345678910111213141516171819202122方式二:通过线程池public class ThreadPoolDemo { public static void main(String[] args) { ExecutorService newCachethreadPool = Executors.newCachedThreadPool(); Future&lt;String&gt; future = newCachethreadPool.submit(new MyCallable()); if (!future.isDone()) { System.out.println(&quot;Please wait&quot;); } try { System.out.println(&quot;Task return:&quot; + future.get()); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } finally { newCachethreadPool.shutdown(); } }} 进程状态 1.新建(New):创建后尚未启动 2.运行(Runnable):包含Running和Ready,可能正在执行,也可能在等待cpu分配时间 3.无限期等待(Waiting):不会被分配cpu执行时间,需要被显示唤醒 4.限期等待(Timed Waiting):在一定时间后会由系统自动唤醒 5.阻塞(Blocked):等待获取排他锁 6.结束(Terminated):已终止线程的状体,线程已经结束执行 sleeo和wait的区别基本的差别 sleep是Thread的方法,而wait是Object的方法 sleep方法可以在任何地方使用;wait只能在synchronize方法或者synchronized块中使用(获取锁才能释放锁) 最主要区别 Thread.sleep会让出cpu,不会让出锁 Object.wait会让出cpu,还会让出锁 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class WaitSleepDemo { public static void main(String[] args) { final Object lock = new Object(); new Thread(new Runnable() { @Override public void run() { System.out.println(\"Thread A wait for lock\"); synchronized (lock) { try { System.out.println(\"Thread A get lock\"); Thread.sleep(20); System.out.println(\"Thread A do wait method\"); lock.wait(1000); System.out.println(\"Thread a is done\"); } catch (InterruptedException e) { e.printStackTrace(); } } } }).start(); //保证前一个线程先执行 try { Thread.sleep(10); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(new Runnable() { @Override public void run() { System.out.println(\"Thread B wait for lock\"); synchronized (lock) { try { System.out.println(\"Thread B get lock\"); System.out.println(\"Thread B is sleeping\"); Thread.sleep(10); System.out.println(\"Thread B is done\"); } catch (InterruptedException e) { e.printStackTrace(); } } } }).start(); }}输出:Thread A wait for lockThread A get lockThread B wait for lockThread A do wait methodThread B get lockThread B is sleepingThread B is doneThread A is done notify和notifyall的区别123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class WaitSleepDemo { public static void main(String[] args) { final Object lock = new Object(); new Thread(new Runnable() { @Override public void run() { System.out.println(\"Thread A wait for lock\"); synchronized (lock) { try { System.out.println(\"Thread A get lock\"); Thread.sleep(20); System.out.println(\"Thread A do wait method\"); lock.wait(); System.out.println(\"Thread A is done\"); } catch (InterruptedException e) { e.printStackTrace(); } } } }).start(); try { Thread.sleep(10); } catch (InterruptedException e) { e.printStackTrace(); } new Thread(new Runnable() { @Override public void run() { System.out.println(\"Thread B wait for lock\"); synchronized (lock) { try { System.out.println(\"Thread B get lock\"); System.out.println(\"Thread B is sleeping\"); Thread.sleep(10); System.out.println(\"Thread B is done\"); lock.notify(); } catch (InterruptedException e) { e.printStackTrace(); } } } }).start(); }}输出:Thread A wait for lockThread A get lockThread B wait for lockThread A do wait methodThread B get lockThread B is sleepingThread B is done //notify通知AThread A is done 两个概念 锁池EntryList 等待池WaitSet 区别 yeild当调用yeild方法时,会暗示线程调度器当前线程愿意让出cpu,但是线程调度器有可能会忽略这个暗示 yeild对锁不会有影响 如何中断线程已经被抛弃的方法 目前使用的方法调用interupt(),通知线程应该中断了 1.如果线程处于被阻塞的状态(如sleep,wait,join),那么线程将立刻退出被阻塞的状态,并且抛出一个InterruptedException异常 2.如果线程处于活动状态,那么将该线程的中断标志设置为true.被设置中断标志的线程将继续正常运行,不受影响 3.需要调用线程配合中断:经常检查本线程的中断标志位,如果被设置了中断标志就自行停止线程;在调用阻塞方法的时候,捕获InterruptedException 123456789101112131415161718192021222324252627282930313233343536public class InterruptDemo { public static void main(String[] args) throws InterruptedException { Runnable interruptTask = new Runnable() { @Override public void run() { int i = 0; try { //在正常运行任务时，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程 while (!Thread.currentThread().isInterrupted()) { Thread.sleep(100); // 休眠100ms i++; System.out.println(Thread.currentThread().getName() + \" (\" + Thread.currentThread().getState() + \") loop \" + i); } } catch (InterruptedException e) { //在调用阻塞方法时正确处理InterruptedException异常。（例如，catch异常后就结束线程。） System.out.println(Thread.currentThread().getName() + \" (\" + Thread.currentThread().getState() + \") catch InterruptedException.\"); } } }; Thread t1 = new Thread(interruptTask, \"t1\"); System.out.println(t1.getName() +\" (\"+t1.getState()+\") is new.\"); t1.start(); // 启动“线程t1” System.out.println(t1.getName() +\" (\"+t1.getState()+\") is started.\"); // 主线程休眠300ms，然后主线程给t1发“中断”指令。 Thread.sleep(300); t1.interrupt(); System.out.println(t1.getName() +\" (\"+t1.getState()+\") is interrupted.\"); // 主线程休眠300ms，然后查看t1的状态。 Thread.sleep(300); System.out.println(t1.getName() +\" (\"+t1.getState()+\") is interrupted now.\"); }} 1234567t1 (NEW) is new.t1 (RUNNABLE) is started.t1 (RUNNABLE) loop 1t1 (RUNNABLE) loop 2t1 (TIMED_WAITING) is interrupted.t1 (RUNNABLE) catch InterruptedException.t1 (TERMINATED) is interrupted now. 线程状态及状态之间的转换","link":"/2019/07/24/Java多线程和并发/"},{"title":"Java常用类库","text":"Java异常体系Error和Exception的区别 Error:程序无法处理的系统错误,编译器不做检查 Exception:程序可以处理异常,捕获后可以恢复 总结:前者程序无法处理,后者是可以处理的异常 常见Error和Exception 异常处理体系 finally会在catch块里的return前执行 异常处理原则 高效的异常处理框架 try-catch的性能 Java集合框架 集合之List和Set 集合之MapHashMap,HashTable,ConccurentHashMap的区别 java8以后,hashMap中的元素为Node &lt;k,v&gt;[]&lt;/k,v&gt; 将Map变成线程安全的 原理和HashTable一样 1Collections.synchronizedMap(hashMap); 如何优化Hashtable? 通过锁的细粒度化,将锁拆解为多个锁进行优化 只锁定当前链表或者红黑树的首个节点来实现 sizeCtl:负数代表正在初始化,-1正在初始化,-n n-1 个线程在扩容,正数还未初始化 Java的IO机制BIO,NIO,AIO的区别","link":"/2019/08/13/Java常用类库/"},{"title":"Java底层:GC","text":"标记算法引用计数算法（不适合循环引用） 通过判断对象的引用数量来决定对象是否可以被回收 每个对象实例都有一个引用计数器,被引用则+1,完成引用则-1 任何引用计数为0的对象实例可以被当做垃圾收集 优点: 执行效率高,程序执行受影响较小 缺点: 无法检测出循环引用的情况,导致内存泄露 可达性分析算法通过判断对象的引用链是否可达来决定对象是否可以被回收 可以作为GCRoot的对象 垃圾回收算法标记-清除算法（碎片化） 标记:从根集合进行扫描,对存货的对象进行标记 清除:对堆内存从头到尾进行线性遍历,回收不可达对象 缺点:不需要进行对象的移动，碎片化严重。如果下一次需要新建一个大的对象，位置不够 复制算法（年轻代） 分为对象面和空闲面 对象在对象面上创建，存活对象从对象面复制到空闲面，再将对象面的所有对象清除 解决了碎片化问题 顺序分配内存,简单高效 适用于对象存活率低的场景 适用于年轻代(存活对象少) 标记-整理算法（老年代） 标记:从根集合进行扫描,对存货的对象进行标记 清除:移动所有存活的对象,且按照内存地址依次排列,然后将末端内存地址以后的内存全部回收 避免内存的不连续 不用设置两块内存互换 适用于存活率高的场景,如老年代 分代收集算法 垃圾回收算法的组合拳 按照对象生命周期的不同划分区域采用不同的垃圾回收算法 目的:提高JVM的回收效率 GC的分类 Minor GC 发生在年轻代,采用复制算法 Full GC 与老年代相关,一般老年代的回收伴随着年轻代的回收,因此称为FullGC 年轻代:尽可能快速地收集掉那些生命周期短的对象 Eden区（伊甸园） 两个Survivor区（from&amp;to）8：1：1 年轻代垃圾回收过程: eden满了，触发mirror-gc，将存活对象复制到survivor 清理eden区 eden再次满了，将eden和s0中的对象拷贝到s1，年龄加1，清理eden和s0 eden再次满了，将eden和s1中的对象拷贝到s0，年龄加1，清理eden和s1 当对象的年龄超过一定岁数,变为老年代,可通过参数调节 对象如何晋升到老年代 经历一定Minor次数仍然存活 Survivor区中放不下的对象 新生成的大对象(-XX:+PretenuerSizeThreshold) 常用调优参数 老年代:存放生命周期较长的对象大概比例1：2 FullGC和MajorGC FullGC比MinorGC慢（10倍）,但执行频率低 触发fullGC方条件: 老年代空间不足 MinorGC晋升到老年代的平均大小大于老年代的剩余空间 永久代空间不足(JDK7之前，这也是用元空间替代永久代的原因,降低fullGC的频率) 调用System.gc()(这个方法不一定执行) CMS GC时出现promotion failed,concurrent mode failure 使用RMI来进行RPC或者管理的JDK应用,每小时执行一次FullGC 垃圾收集器 stop-the-world Safepoint(回收垃圾要提醒不要扔垃圾) JVM的运行模式 Server(启动慢,稳定后比Client快) Client 垃圾收集器的联系 年轻代常见收集器 除了Serial只有它能和CMS配合,Server下的首选的收集器 老年代常见收集器 对停顿不敏感,硬件好,更多存活时间长的对象选择CMS;碎片化 GC常见面试题Object的finalize()方法的作用是否与C++的析构函数作用相同 12345678910111213public static void main(String[] args) { Finalization f = new Finalization(); System.out.println(&quot;First print: &quot; + f); f = null; System.gc(); try {// 休息一段时间，让上面的垃圾回收线程执行完成 Thread.currentThread().sleep(1000); } catch (InterruptedException e){ e.printStackTrace(); } System.out.println(&quot;Second print: &quot; + f); System.out.println(f.finalization);} java中的强引用,软引用,弱引用,虚引用有什么用强引用 软引用 弱引用 虚引用","link":"/2019/07/24/Java底层-gc/"},{"title":"Java底层:JVM","text":"谈谈你对java的理解 平台无关性 GC 语言特性 面向对象 类库 异常处理 平台无关如何实现java源码首先被编译成字节码,再由不同平台的jvm进行解析,java语言在不同平台上运行时不需要重新编译,java虚拟机在执行字节码时,把字节码转换为具体平台上的机器指令 为什么jvm不直接将源码解析成机器码去执行 每次执行需要重新编译,进行语法检查语义分析等,性能就会受影响 别的语言也可以解析成字节码 jvm如何加载.class文件 jvm主要由ClassLoader,RuntimeDataArea,ExecutionEngine,NativeInterface这四部分组成,它通过classloader将符合特定格式的class文件加载到内存,再通过executionEngine对命令进行解析,并提交给操作系统执行 谈谈反射 写一个例子1234567891011121314151617181920public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException { Class rc = Class.forName(&quot;com.test.basic.Robot&quot;); Robot r = (Robot) rc.newInstance(); System.out.println(&quot;class name is :&quot; + rc.getName()); Method getHello = rc.getDeclaredMethod(&quot;throwHello&quot;, String.class); getHello.setAccessible(true); Object str = getHello.invoke(r, &quot;bob&quot;); System.out.println(&quot;get hello result:&quot; + str); Method sayHi = rc.getMethod(&quot;sayHi&quot;, String.class); sayHi.invoke(r, &quot;welcom&quot;); Field name = rc.getDeclaredField(&quot;name&quot;); name.setAccessible(true); name.set(r, &quot;dd&quot;); sayHi.invoke(r, &quot;welcome&quot;); } 类从编译到执行的过程 谈谈classloader classloader的种类 自定义classloader的实现关键函数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class MyClassLoader extends ClassLoader { private String path; private String classLoaderName; public MyClassLoader(String path, String classLoaderName) { this.path = path; this.classLoaderName = classLoaderName; } @Override protected Class findClass(String name) { byte[] b = loadClassData(name); return defineClass(name, b, 0, b.length); } private byte[] loadClassData(String name) { name = path + name + &quot;.class&quot;; InputStream in = null; ByteArrayOutputStream out = null; try { in = new FileInputStream(new File(name)); out = new ByteArrayOutputStream(); int i = 0; while ((i = in.read()) != -1) { out.write(i); } } catch (IOException e) { e.printStackTrace(); } finally { try { in.close(); out.close(); } catch (IOException e) { e.printStackTrace(); } } return out.toByteArray(); }}public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException { MyClassLoader myClassLoader = new MyClassLoader(&quot;/home/zw/Documents/&quot;,&quot;Wali&quot;); Class c = myClassLoader.loadClass(&quot;Wali&quot;); System.out.println(c.getClassLoader()); c.newInstance(); } 谈谈类加载的双亲委派机制 为什么使用双亲委派机制避免多份同样的字节码的加载 类加载的方式 隐式加载:new 显式加载:loadClass,forName等 loadClass和forName的区别 类的装载过程 区别:forName得到的class是完成初始化的,loadClass得到的class还没有链接 1234public static void main(String[] args) throws ClassNotFoundException {// ClassLoader cl = Robot.class.getClassLoader(); Class c = Class.forName(&quot;com.test.basic.Robot&quot;);} forName用于需要执行初始化的类,loadClass用于延时加载,加快加载速度 Java的内存模型内存简介 地址空间的划分 java的内存空间在用户空间 内存空间即RuntimeDataArea 程序计数器(Program Counter Register) 程序计数器是逻辑计数器,为了线程切换后都能恢复正确的执行位置,每个线程都有独立的程序计数器,并且只为java方法计数 java虚拟机栈(Stack) 虚拟机栈包含了单个线程每个方法执行的栈帧,栈帧存储了局部变量表,操作栈,动态连接,方法出口 局部变量表和操作数栈 局部变量表为操作数栈提供数据支撑 递归为什么会导致StackOverFlow异常 递归过深,栈帧超出虚拟栈深度 虚拟机栈过多会引发OutOfMemory异常本地方法栈与虚拟机栈类似,主要作用于标注了native的方法 元空间(MetaSpace)与永久代(PermGen)在jdk7以后,把类的元数据放在本地堆内存中,这块区域叫MetaSpace,该区域在jdk7以前属于永久代,二者都是用来储存class的相关信息,包括class对象的method,filed. 元空间和永久代都是方法区的实现,方法区只是jvm的规范. 在java7之后,原先位于方法区的字符串常量池被移动到java堆中,并且在java8后使用元空间替换永久代. 元空间使用的本地内存,而永久代使用的是jvm的内存. 这样的好处是解决了空间不足,其大小是动态分配的 元空间内存空间使用的是本机内存,没有了字符串常量池(java7后被移动到了堆中),永久代的空间有限 java堆(Heap) JVM三大性能调优参数-Xms -Xmx -Xss的含义1java -Xms128m -Xmx128m -Xss256k -jar xxx.jar Xss:规定了每个线程虚拟机栈(堆栈)的大小(一般情况256k足够,将会影响并发线程数的大小) Xms:堆的初始值(一旦对象容量超过java堆的容量,会进行扩容) Xmx:堆能达到的最大值(一般情况设置成和xms一致,不会发生抖动) java内存模型中堆和栈的区别内存分配策略 联系 区别 管理方式:栈自动释放,堆需要GC 空间大小:栈比堆小 碎片相关:栈产生的碎片远小于堆 分配方式:栈支持静态和动态分配,而堆只支持动态分配 效率:栈的效率比堆高 元空间,堆,线程独占部分空间的联系-内存角度 不同JDK版本之间intern()方法的区别-JDK6 VS JDK6+12String s = new String(&quot;a&quot;);s.intern(); jdk6+不仅能在池中添加对象,还能在池中添加堆中的引用 jdk6:flase false jdk6+:false true","link":"/2019/07/23/Java底层-jvm/"},{"title":"Java框架-Spring","text":"SpringIOC (Inversion of Control) 控制反转 SpringCore最核心部分 需要先了解依赖注入(DependencyInversion) DI举例设计行李箱 IOC,DI,DL的关系 依赖注入的方式 Setter Interface Constructor Annotation 依赖倒置原则,IOC,DI,IOC容器的关系 IOC容器的优势 避免在各处使用new来创建类,并且可以做到同一维护 创建实例时不需要了解细节 spring的IOC容器 SpringIOC支持的功能 SpringIOC容器的核心接口 BeanFactory ApplicationContext BeanDefinition-描述Bean的定义 BeanDefinitionRegistry-提供向容器注册BeanDefinition对象的方法BeanFactory和ApplicationContext的比较 BeanFactory是Spring框架的基础设施,面向Spring ApplicationContext面向开发者 spring比作汽车,BeanFactory就是发动机,而ApplicationContext是完整的汽车 ApplicationContext的功能(继承多个接口) GetBean方法的解析 Spring的作用域 SpringBean的生命周期创建过程 销毁过程 AOP AOP的三种织入方式 Advice的种类 AOP的原理AOP的实现:JDKProxy和Cglib 代理模式:接口+真实实现类+代理","link":"/2019/08/13/Java框架-Spring/"},{"title":"fabric部署过程","text":"","link":"/2019/09/19/fabric部署过程/"},{"title":"30.有效括号生成：leetcode22","text":"problemGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. 123456789For example, given n = 3, a solution set is:[ &quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;] approach1深度优先搜索 12345678910111213141516171819202122class Solution { public List&lt;String&gt; generateParenthesis(int n) { List&lt;String&gt; res = new ArrayList&lt;&gt;(); helper(res, \"\", n, 0, 0); return res; } private void helper(List&lt;String&gt; res, String s, int n, int left, int right) { if (right == n) { res.add(s); return; } if (left &lt; n) { helper(res, s + \"(\", n, left + 1, right); } if (right &lt; left) { helper(res, s + \")\", n, left, right + 1); } }} time:O(n!) O(2^n) 卡特兰数 space:O(n)","link":"/2019/09/18/30-有效括号生成：leetcode22/"},{"title":"leetcode 141. Linked List Cycle","text":"Given a linked list, determine if it has a cycle in it. To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list. Example 1: Input: head = [3,2,0,-4], pos = 1Output: trueExplanation: There is a cycle in the linked list, where tail connects to the second node. Example 2: Input: head = [1,2], pos = 0Output: trueExplanation: There is a cycle in the linked list, where tail connects to the first node. Example 3: Input: head = [1], pos = -1Output: falseExplanation: There is no cycle in the linked list. 方法1：hashtable 1234567891011121314151617181920212223242526/** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */public class Solution { public boolean hasCycle(ListNode head) { Set set = new HashSet(); ListNode cur = head; while(cur!=null &amp;&amp; cur.next!=null){ if(set.contains(cur.next)){ return true; } set.add(cur.next); cur= cur.next; } return false; }} 方法2：快慢指针 123456789101112131415161718192021222324252627282930/** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */public class Solution { public boolean hasCycle(ListNode head) { ListNode slow = head; ListNode fast = head; while(fast!=null &amp;&amp; fast.next!=null){ slow = slow.next; fast = fast.next.next; if(slow == fast){ return true; } } return false; }}","link":"/2019/07/10/leetcode 141. Linked List Cycle/"},{"title":"leetcode 20. Valid Parentheses","text":"Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets.Open brackets must be closed in the correct order.Note that an empty string is also considered valid. Example 1: 12Input: &quot;()&quot;Output: true Example 2: 12Input: &quot;()[]{}&quot;Output: true Example 3: 12Input: &quot;(]&quot;Output: false Example 4: 12Input: &quot;([)]&quot;Output: false Example 5: 12Input: &quot;{[]}&quot;Output: true 方法1： 12345678910111213141516171819class Solution { public boolean isValid(String s) { Map&lt;Character,Character&gt; m = new HashMap&lt;Character,Character&gt;(); m.put(&apos;)&apos;, &apos;(&apos;); m.put(&apos;}&apos;, &apos;{&apos;); m.put(&apos;]&apos;, &apos;[&apos;); Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;(); for (char key : s.toCharArray()) { if (!m.containsKey(key)) { stack.push(key); } else if (stack.empty() || !m.get(key).equals(stack.pop())) { return false; } } return stack.empty(); }}","link":"/2019/07/10/leetcode 20. Valid Parentheses/"},{"title":"leetcode 232. Implement Queue using Stacks","text":"Implement the following operations of a queue using stacks. push(x) – Push element x to the back of queue.pop() – Removes the element from in front of queue.peek() – Get the front element.empty() – Return whether the queue is empty. Example: 1234567MyQueue queue = new MyQueue();queue.push(1);queue.push(2); queue.peek(); // returns 1queue.pop(); // returns 1queue.empty(); // returns false 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class MyQueue { Stack&lt;Integer&gt; input = new Stack();; Stack&lt;Integer&gt; output = new Stack(); /** Initialize your data structure here. */ public MyQueue() { } /** Push element x to the back of queue. */ public void push(int x) { input.push(x); } /** Removes the element from in front of queue and returns that element. */ public int pop() { copy(); return output.pop(); } /** Get the front element. */ public int peek() { copy(); return output.peek(); } /** Returns whether the queue is empty. */ public boolean empty() { return input.empty() &amp;&amp; output.empty(); } private void copy(){ if(output.empty()){ while(!input.empty()){ output.push(input.pop()); } } }}/** * Your MyQueue object will be instantiated and called as such: * MyQueue obj = new MyQueue(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.peek(); * boolean param_4 = obj.empty(); */","link":"/2019/07/10/leetcode 232. Implement Queue using Stacks/"},{"title":"57.布隆过滤器","text":"Bloom Filter一个很长的二进制向量和一个映射函数 布隆过滤器可以用于检索一个元素是否存在一个集合中 优点是空间效率和查询效率远超一般算法，缺点是有一定的误识别率和删除困难 案例 比特币： 查询交易记录。先利用布隆过滤器查询是否存在记录 分布式系统：判断子任务是否在一台机器上存在","link":"/2019/09/18/57-布隆过滤器/"},{"title":"leetcode 24. Swap Nodes in Pairs","text":"Given a linked list, swap every two adjacent nodes and return its head. You may not modify the values in the list’s nodes, only nodes itself may be changed. Example: 1Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3. 1234567891011121314151617181920212223242526/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */class Solution { public ListNode swapPairs(ListNode head) { ListNode newHead = new ListNode(0); newHead.next = head; ListNode pre = newHead; while(pre.next!=null &amp;&amp; pre.next.next!=null){ ListNode first = pre.next; pre.next = first.next; first.next = first.next.next; pre.next.next = first; pre = first; } return newHead.next; }}","link":"/2019/07/10/leetcode 24. Swap Nodes in Pairs/"},{"title":"leetcode 206. Reverse Linked List","text":"Reverse a singly linked list. 12Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULLOutput: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL 123456789101112131415161718192021222324/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */class Solution { public ListNode reverseList(ListNode head) { ListNode cur = head; ListNode prev = null; while(cur!=null){ ListNode lat = cur.next; cur.next = prev; prev = cur; cur = lat; } return prev; } }","link":"/2019/07/10/leetcode 06. Reverse Linked List/"},{"title":"leetcode 1. Two Sum","text":"problemGiven an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: 1234Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. approach 1算法12345678910111213141516171819202122232425262728/* * @lc app=leetcode id=1 lang=java * * [1] Two Sum */class Solution { public int[] twoSum(int[] nums, int target) { int[] res = new int[2]; if (nums == null || nums.length &lt;= 1) { return res; } Map&lt;Integer, Integer&gt; m = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) { Integer pst = m.get(nums[i]); if (pst == null) { m.put(target - nums[i], i); } else { res[0] = pst; res[1] = i; break; } } return res; }} 复杂度 time:O(n) space:O(n) approach 2算法双循环 复杂度 time:O(n^2) space:O(1)","link":"/2019/07/11/leetcode-1-Two-Sum/"},{"title":"leetcode 15. 3Sum","text":"problemGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets. Example: 1234567Given array nums = [-1, 0, 1, 2, -1, -4],A solution set is:[ [-1, 0, 1], [-1, -1, 2]] approach 1算法暴力解法，3 层循环 复杂度 time:O(n^3) space:O(1) approach 2算法2 层+set 复杂度 time:O(n^2) space:O(n) approach 3算法1234567891011121314151617181920212223242526272829303132class Solution { public static List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) { if (nums == null || nums.length &lt; 3) { return Collections.EMPTY_LIST; } Set&lt;List&lt;Integer&gt;&gt; res = new HashSet&lt;&gt;(); Arrays.sort(nums); for (int i = 0; i &lt; nums.length - 2; i++) { if (i &gt;= 1 &amp;&amp; nums[i] == nums[i - 1]) { continue; } Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); for (int j = i + 1; j &lt; nums.length; j++) { if (set.contains(nums[j])) { res.add(Arrays.asList(nums[i], (-nums[i] - nums[j]), nums[j])); set.remove(nums[j]); } else { set.add(-nums[i] - nums[j]); } } } return new ArrayList&lt;&gt;(res); }} 复杂度 time:O() space:O() summery","link":"/2019/07/11/leetcode-15-3Sum/"},{"title":"leetcode 703. Kth Largest Element in a Stream","text":"Example: 12345678int k = 3;int[] arr = [4,5,8,2];KthLargest kthLargest = new KthLargest(3, arr);kthLargest.add(3); // returns 4kthLargest.add(5); // returns 5kthLargest.add(10); // returns 5kthLargest.add(9); // returns 8kthLargest.add(4); // returns 8 1234567891011121314151617181920212223242526272829303132333435class KthLargest { private int k; private PriorityQueue&lt;Integer&gt; queue; public KthLargest(int k, int[] nums) { this.k = k; queue = new PriorityQueue(); for (int num : nums) { add(num); } } public int add(int val) { if (queue.size() &lt; k) { queue.offer(val); return queue.peek(); } int target = queue.peek(); if (val &lt; target) { return target; } queue.poll(); queue.offer(val); return queue.peek(); }}/** * Your KthLargest object will be instantiated and called as such: * KthLargest obj = new KthLargest(k, nums); * int param_1 = obj.add(val); */","link":"/2019/07/10/leetcode 703. Kth Largest Element in a Stream/"},{"title":"哈希表","text":"HashTable &amp; Hash Function &amp; Collisions HashMap,HashSet,TreeMap,TreeSethashtable vs binary-serch-tree 但是二叉搜索树相对有序","link":"/2019/07/11/哈希表/"},{"title":"redis","text":"为什么redis能这么快100000+qps 完全基于内存,绝大部分请求是纯粹的内存操作 数据结构简单,键值对,查找的时间复杂度是O(1) 采用单线程,单线程也能处理高并发请求,想多核也可启动多实例(单线程只是处理网络请求的时候是单线程) 使用多路I/O复用模型,非阻塞IO 多路IO复用模型 FD:File Descriptor,文件描述符一个打开的文件通过唯一的描述符进行引用,该描述符是打开文件的元数据到文件本身的映射 传统的阻塞I/O模型当对某个文件进行读写时,如果当前FD不可读或者不可写,redis就不会对其他操作进行响应,导致服务不可用 select系统调用:监听文件是否可读写 redis采用的IO多路复用函数:epoll/kqueue/evport/select 因地制宜 优先选择时间复杂度为O(1)的函数 select时间复杂度为O(n)作为保底 基于react设计模式监听I/O事件 redis使用的数据类型 从海量Key查询出某一固定前缀的Key 问清数据规模 使用keys对线上业务的影响keys指令一次性返回所有匹配的key,key的数量过大会使服务卡顿 使用scan指令:无阻塞 如何通过redis实现分布式锁分布式锁需要解决的问题 互斥性:只能由一个客户端获取到锁 安全性:只能由获取锁的客户端删除锁 死锁:获取到锁的客户端宕机,需要由机制防止 容错:部分节点宕机,仍然可以获取锁 setnx key val 解决setnx长期有效 如果大量的key同时过期需要注意什么集中过期,由于删除大量key需要时间,会出现卡顿现象 解决:设置key的过期时间时,给每个key加上随机值 如何使用redis做异步队列 使用List作为队列,rpush生产消息,lpop消费消息. 缺点:没有等待队列里有值才去消费,可以在程序中引入sleep机制去调用lpop重试 blpop key timeout:阻塞直到队列有消息或者超时 缺点:只能提供给一个消费者 pub/sub:主题订阅者模式-一对多 缺点:消息的发布无状态,无法保证被接收到 redis如何做持久化RDB(快照)持久化:保存某个时间节点的全量数据快照 sava:阻塞服务进程,直到RDB创建完成 bgsave:fork出一个子进程来创建RDB文件,不阻塞服务器进程 自动化触发RDB持久化 bgsave原理 RDB持久化的缺点 全量同步,数据量大会由于IO而严重影响性能 可能会因为redis挂掉而丢失从当前至最近一次快照期间的数据 AOF(Append-Only-File)持久化:保存写状态 记录下除了查询以外的所有变更数据库状态的命令 以append的形式追加到AOF文件中 RDB和AOF共存的情况下的恢复流程 RDB和AOF的优缺点 RDB-AOF混合持久化bgsave做镜像全量持久化,aof做增量持久化 使用Pipeline的好处 Redis的主从同步主从同步原理 全同步 增量同步 主从同步Master宕机后的主从切换问题 留言协议Gossip在杂乱无章中寻求一致 Redis的集群原理如何从海量数据中快速找到所需 分片:按照某种规则去划分数据,分散存储在多个节点上 常规的哈希划分无法实现节点的动态增减 一致性哈希算法:对2^32取模,将哈希值空间组织成虚拟的圆环.一致性哈希算法对于节点的增减都只需重新定位环中的一小部分数据. 一致性哈希算法缺点:节点少的时候会发生数据倾斜.解决:引入虚拟节点","link":"/2019/07/21/redis/"},{"title":"数据库","text":"数据库架构如何设计一个关系型数据库首先将其划分为存储部分和对存储进行逻辑管理的程序实例，存储部分类似一个文件系统，程序实例将包含数据逻辑关系转为物理存储关系的存储管理模块，优化存储效率的缓存模块，将sql语句进行解析的sql解析模块，记录操作的日志管理模块，进行多用户管理的权限划分模块，容灾模块，优化数据查询的索引模块，使数据库支持并发的锁模块。 索引为什么使用索引当查询大量数据，如果进行全表扫描，查询非常慢，所以需要更高效的机制来避免全表扫描。 什么样的信息能成为索引主键，唯一键，普通键等能让数据具备区分性 索引的数据结构主流是B+树，还有hash结构和BitMap，其中Mysql不支持BitMap，基于innodb和mysm引擎的mysql不显示支持hash 二叉查找树O(logn) 缺点：插入数据有可能变为线性二叉树-》树旋转 检索深度每增加1，就会发生一次io，检索性能降低。-》要使树变得矮一些，每个节点数据存储多一些， B树O(logn) 说明：前四条规则用来限制孩子数，最后一条规则限制节点关键字数量及大小。通过合并，分裂，上移下移来使树不变成线性 B+树O(logn)-主流 B+树只存索引信息，内部节点比B树更小，储存时，盘块所能容纳的关键字数量更多，一次性读入内存的关键字更多，减少io次数 Hash BitMap（位图索引） 密集索引和稀疏索引 innodb有且只有一个聚集索引，数据文件和索引绑在一起，必须要有主键，通过主键索引效率很高，但是辅助索引需要查两次。 myisam是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的，因此myisam适合增删改。 如何定位并优化慢查询sql 根据慢日志 根据explain 123explain select count(id) from person_info ;key-account 不是主键id，原因是密集索引的叶子索引把其他列的数据也存放在叶子节点中，查询效率比稀疏索引低 修改sql或者尽量让sql走索引 联合索引最左原则的成因最左匹配原则： mysql会一直向右匹配直到遇到范围查询就停止匹配，比如a=3 and b=2 and c&gt;3 and d=5，如果建立(a,b,c,d)索引，d是用不到索引的，如果建立的是(a,b,d,c)索引则都可以用到，且a，b，d的顺序是可以任意调整的 =和in是可以乱序的 成因： mysql创建复合索引时，首先对第一个字段进行排序，在第一个字段的基础上，再对第二个字段进行排序，依次类推，所以自能最左匹配 索引建立的越多越好吗 数据量小的表不需要索引，建立增加额外开销 数据变更需要维护索引，更多的索引意味着更多的维护成本 更多的索引意味着需要更多的空间 锁MyISAM和InnoDB的锁的区别是什么 myisam： 读写、写读-myisam在进行查询的时候，会加一个表级别的读锁；在进行增删改的时候会加一个表级别的行锁。在读锁未被释放，加写锁时会被阻塞，直到读锁被释放为止。 读读-可以同时进行，读锁又叫共享锁。（上排他锁，for update） 写写-不能同时写，写锁又叫排他锁 innodb： 二段锁：加锁解锁两个步骤，先对同一个事务里的一批操作做加锁，commit的时候再进行解锁 12345set autocommit=0；// 支持事务，需要关闭事务自动提交先读后写session1：select * from person_info where id=1;session12: update person_info set title =&quot;test&quot; where id=1;//本来应该阻塞，竟然成功//实际innodb对select做了改进，并未上读锁 表级锁和索引无关，行级锁和索引有关 锁的力度越细，代价越高。表级锁只要在表的头部上锁，行级锁需要扫描到某行后对其加锁，开销更大 MyISAM默认用的是表级锁，不支持行级锁 InnoDB默认用的是行级锁，也支持表级锁 MyISAM适合的场景 频繁执行全表count语句 对数据的增删改的频率不高 shiwu，查询频繁 没有事务 InnoDB适合的场景 增删改查频繁 需要事务 数据库锁的分类、 悲观锁：对数据被外界修改持保守态度，在数据处理过程将数据锁定，依靠数据库提供的锁机制实现。缺点：增加开销，降低并行性 乐观锁：认为数据一般情况下不会冲突，到数据提交更新时才检查是否冲突，通过版本号和时间戳实现 有一条比较好的建议，可以减小乐观锁力度，最大程度的提升吞吐率，提高并发能力！如下： 12//修改商品库存update item set quantity=quantity - 1 where id = 1 and quantity - 1 &gt; 0 事务的四大特性 原子性:事务包含的全部操作要么全部执行要么全部不执行 一致性:事务要确保数据库的状态从一个一致的状态转为另一个一致的状态(转帐) 隔离性:多个事务并发执行时,一个事务的执行不应该影响其他事务 持久性:一个事务的提交,他对数据库的修改 应该永久地保存在数据库中 事务的隔离级别以及各级别下的并发访问问题1select @@tx_isolation 事务并发访问引起的问题以及如何避免 更新丢失-mysql所有事务隔离级别在数据库层面上均可避免 脏读（读未提交）-解决：将隔离级别设置为读已提交read-committed就可避免 1set session transaction isolation level read uncommitted;//读未提交 不可重复读-解决：将隔离级别设置为可重复读repeatable-read 12345session1 一直查询，余额为1300session2 update balance=300，未提交session1 查询，余额为1300session2提交session1查询变为1600 -幻读（事务a查询若干条数据，事务b插入或修改了事务a的结果集，导致事务a像出现幻觉一样）-解决：将事务隔离级别设置为serializable 123456789session a： select * from account lock in share mode;//查出3条数据(rr级别下:无法插入,等待session a 提交,mysql的innodb在rr级别下避免了幻读)sessionb: insert into account;(rc级别下：竟然更新了4条数据)sesion a: update account set balance =100; 出于性能考虑，事务级别越高，降低数据库的并发度越低。 oracle默认读已提交read-committed；mysql的默认为repeatable-read； innodb可重复读rr级别如何避免幻读表象:快照读(非阻塞读)–伪mvcc 内在:行锁+gap锁 当前读和快照读当前读,加了锁的增删改查,也就是读取最新数据 快照读用于提升并发性能,基于多版本并发控制及mvcc,mvcc是行级锁的变种,在很多情况下避免了加锁操作,开销更低. 读取的有可能是历史版本(rr级别下,快照读取决快照创建的时机),在serializable下无效 12345678910111213s1:select * from A where id =2;// balance=1000s2:update A set balance=600 where id=2;rc级别下:s1:select * from A where id=2;//balance=600;s1:select * from A where id=2 lock in share mode;//balance=600rc级别下当前读和快照读读到的数据版本是一样的rr级别下:s1:select * from A where id=2;//balance=1000;s1:select * from A where id=2 lock in share mode;//balance=600rr级别下快照读有可能读到数据的历史版本 rc,rr级别下的InnoDB的非阻塞读如何实现 修改过程:先加上排他锁,然后拷贝一份到undo log中 readview决定可见性 取出的trx_id小于当前活跃事务Id rc级别下,每次快照读都会创建一个新的快照 rr级别下,快照读读的是第一次创建的快照 next-key锁(行锁+gap锁)gap锁,防止同一事务的两次当前读出现幻读,在rr级别以上才有 Gap锁用在非唯一索引或者不走索引的当前读中 关键语法group by 满足:select的列要么是group by的条件要么是统计相关的函数 列函数对于group by字句定义的每个组各返回一个结果 12345678910#查询所有同学的学号,选课数,总成绩select student_id,count(course_id),sum(score)from scoregroup by student_id#查询所有同学的学号,姓名,选课数,总成绩select s.student_id,t.name,count(course_id),sum(score)from score s,student twhere s.student_id = t.student_idgroup by student_id having 123456789101112#查询平均成绩大于60分的同学的学号和平均成绩select student_id,avg(score)from scoregroup by student_idhaving avg(score)&gt;60#查询没有学全所有课的同学的学号,姓名select s.student_id,t.namefrom score s,student twhere s.student_id=t.student_idgroup by student_idhaving count(s.course_id)&lt;(select count(*) from course group by course_id) 统计相关:count,sum,max,min,avg#","link":"/2019/07/19/数据库/"},{"title":"数组和链表","text":"数组数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。 连续的内存空间和相同类型的数据。正是因为这两个限制，它才有了一个堪称“杀手锏”的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。 #链表 从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度是 O(1)。链表要想随机访问第 k 个元素，就没有数组那么高效了。因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。 对比 数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。 数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然地支持动态扩容，我觉得这也是它与数组最大的区别。","link":"/2019/07/09/数组和链表/"},{"title":"leetcode 239. Sliding Window Maximum","text":"题目Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window. Example: 123456789101112Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3Output: [3,3,5,5,6,7]Explanation:Window position Max--------------- -----[1 3 -1] -3 5 3 6 7 3 012 2 1 [3 -1 -3] 5 3 6 7 3 123 3 1 3 [-1 -3 5] 3 6 7 5 234 4 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 思路解法1：max heapa.维护一个大顶堆b.取Max-&gt;top 复杂度O(n*logk) 解法2:双端队列a.入队b.维护 复杂度O(n*1) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import java.util.ArrayDeque;import java.util.Deque;/* * @lc app=leetcode id=239 lang=java * * [239] Sliding Window Maximum */class Solution { public static int[] maxSlidingWindow(int[] nums, int k) { if (nums.length &lt;= 0) { return nums; } Deque&lt;Integer&gt; window = new ArrayDeque&lt;&gt;();// 用于储存窗口的下标 int[] res = new int[nums.length - k + 1]; // 从左边开始前进 for (int i = 0; i &lt; nums.length; i++) { //1.窗口界限 2.窗口左边最大的剔除 // 1 if (!window.isEmpty() &amp;&amp; window.peek() &lt;= i - k) { window.pollFirst(); } // 2 // 比窗口左边的小，继续，比窗口的大，删除左边的 while (!window.isEmpty() &amp;&amp; nums[window.peekLast()] &lt; nums[i]) { window.pollLast(); } window.offer(i); System.out.println(window); if (i &gt;= k - 1) { res[i - k + 1] = nums[window.peek()]; } } return res; }}","link":"/2019/07/11/leetcode 239. Sliding Window Maximum/"},{"title":"堆栈和队列","text":"Stack-先入后出-报纸 Queue-先入先出-队伍 PriorityQueue-优先队列 正常入、按照优先级出 实现机制，堆（二叉堆，多项式堆，斐波那契堆），二叉搜索树s 二叉堆的性能最差，斐波拉契堆效率最好（删除效率为O(logn,其他为 O(1)) java，Python中的堆已经实现好了，运用的是斐波拉契堆或者平衡二叉树","link":"/2019/07/10/堆栈和队列/"},{"title":"网络","text":"网络基础知识OSI开发式互联参考模型 第一层【物理层】传输比特流。物理设备的标准，数模转换，网卡 第二次【数据链路层】物理寻址，同时将原始比特流转变为逻辑传输线路。 定义如何格式数据进行传输，错误检查和纠正。将比特数据组成帧，交换机工作在这一层，将帧解码，根据帧中的信息，把数据发送到接收方。 第三层【网络层】控制子网的运行，如逻辑编址、分组传输、路由选择。通讯时经过多个节点，如何找到目标节点，最佳路径？将网络地址翻译成物理地址，将数据从发送方路由到接收方，路由器属于网络层，这层数据称为数据包，需要关注的协议Ip协议 第四层【传输层】接受上一层数据，在必要时把数据进行分割，并将这些数据交给网络层，且保证这些数据有效到达对端。需要关注TCP，UDP协议 第五层【会话层】建立和管理应用程序之间的通信。自动收发包，寻址 第六层【表示层】信息的语法语义以及他们之间的关联。解决不同系统通信的语法问题 第七层【应用层】http协议 OSI的实现：TCP/IP四层架构模型 TCP的三次握手why:ip协议是无连接的通信协议，无法确认包是否按顺序发送，或者包是否被破坏，所以需要由下一层进行控制 报文头：源端口+目的端口+sequence number+acknowledge number+TCPflag 握手是为了建立连接，握手的流程图如下： 为什么需要三次握手才能建立起连接为了初始化双方的sequence number，作为以后的通讯序号，保证接收到数据乱序 首次握手的隐患–SYN超时服务器收到客户端的SYN，回复SYN-ACK时客户端掉线，服务端没有收到ACK确认，就会不断重试直到超时，可能遭到SYN Flood攻击。 防护措施：SYN队列满后，通过SYN Cookie，依然可以建立连接 建立连接后，客户端故障怎么办保活机制：向对方发送探测报文，如果未收到响应则继续发送，达到次数则中断连接 TCP的四次挥手 为什么会有2msl的time_wait的状态保证有足够时间让对方收到ＡＣＫ包，避免新旧连接混淆 为什么需要４次挥手双方都要接收到ＦＩＮ报文和ＡＣＫ报文 服务器出现大量CLOSE_WAIT的原因对方关闭socket连接，我方忙于读或写，没有及时关闭连接 检查代码资源释放，检查线程配置 1netstat -n |awk &apos;/^tcp/{++S[$NF]}END{for(a in s) print a,s[a]}&apos; UDP报文结构：源端口+目的端口+数据包长度+checksum+数据 TCP和UDP的区别 面向连接 vs 无连接（适合消息多播发布） 可靠性（TCP握手，UDP可能丢失） 有序性（TCP有序，UDP无序） 速度（TCP创建连接，较慢） 量级（数据头TCP20字节UDP8字节） TCP的滑动窗口 TCP的最基础的可靠性来源确认重传机制发送窗口左边界的数据连续被确认收到，据窗口才可以移动。滑动窗口的大小根据处理能力动态变化 Http协议 1.0-&gt;1.1 keep-alive 在浏览器地址栏键入Url，按下回车后经历的流程 DNS解析（浏览器依据url逐层查询dns缓存解析url对应的ip（浏览器缓存，系统缓存，路由器缓存。。）） TCP连接 http请求 服务器处理并返回http报文 浏览器解析渲染页面 释放连接 常见http状态码1XX 指示信息-请求已接受，继续处理2XX 成功-请求已成功接收，理解，接收3XX 重定向-要完成请求必须进一步操作4XX 客户端错误-请求有语法错误，或者无法实现 400 语法错误，不能理解 401 未授权 403 forbiden 404 notfound5XX 服务端错误 500 未知错误 503 当前无法处理，连接池满了 Get请求和Post请求的区别 报文上看：get请求将请求信息放在url中，post放在报文体中，get长度限制 数据库看：get符合幂等性和安全性，post不符合（post会提交数据，post每次请求会添加新资源） get可以被缓存，被储存，post不行 cookie和session的区别解决http请求的无状态 Cookie是客户端的解决方式 session 区别 http和https的区别 socket","link":"/2019/07/19/网络/"},{"title":"linux","text":"linux的体系结构 如何查找特定的文件:find find ~ -name “target.java” 精确查找文件 find ~ -name “target*” 模糊查找文件 find ~ -iname “target*” 不区分大小写去查找文件 检索文件内容 grep 查找文件里符合条件的字符串 管道操作符 |,将前一个指令的输出作为后一个指令的输入 常用命令 如何对文件内容做统计 awk 1234awk &apos;{print $1,$3}&apos; netstat.txtawk &apos;($1==&quot;tcp&quot; &amp;&amp; $2==1) || NR==1 {print $0}&apos; netstat.textawk -F &quot;,&quot; &apos;{prrint $2}&apos; netstat.txtgrep &apos;parital\\[true\\]&apos; bac.log| grep -o &apos;engin\\[[0-1a-z]*\\]&apos;| awk &apos;{enginarr[$1]++}END{for(i in anginarr)print i &quot;\\t&quot; enginarr[i]}&apos; 批量替换文件内容 sed 12345sed &apos;s/^Str/String/&apos; replace.javased -i &apos;s/\\./\\;/&apos; replace.java 直接在目标文本修改sed -i &apos;s/jack/me/g&apos; repalce.java 全部替换sed -i &apos;/^ *$/d/&apos; replace.java 删除空行sed -i &apos;/Integer/d&apos; repalce.java","link":"/2019/07/23/linux/"},{"title":"leetcode 242. Valid Anagram","text":"problemGiven two strings s and t , write a function to determine if t is an anagram of s. Example 1: 12Input: s = &quot;anagram&quot;, t = &quot;nagaram&quot;Output: true Example 2: 12Input: s = &quot;rat&quot;, t = &quot;car&quot;Output: false Note:You may assume the string contains only lowercase alphabets. Follow up:What if the inputs contain unicode characters? How would you adapt your solution to such case? approach 1算法sort 1234567891011121314151617181920/* * @lc app=leetcode id=242 lang=java * * [242] Valid Anagram */class Solution { public boolean isAnagram(String s, String t) { if (s.length() != t.length()) { return false; } char[] s1 = s.toCharArray(); char[] t1 = t.toCharArray(); Arrays.sort(s1); Arrays.sort(t1); return Arrays.equals(s1, t1); }} 复杂度 time:O(nlogn) 快排 space:O() approach 2算法map 123456789101112131415161718192021222324252627/* * @lc app=leetcode id=242 lang=java * * [242] Valid Anagram */class Solution { public boolean isAnagram(String s, String t) { Map&lt;Character, Integer&gt; m1 = countCharacter(s); Map&lt;Character, Integer&gt; m2 = countCharacter(t); return m1.equals(m2); } private Map&lt;Character, Integer&gt; countCharacter(String str) { Map&lt;Character, Integer&gt; m = new HashMap&lt;&gt;(); for (Character c : str.toCharArray()) { Integer cnt = m.get(c); if (cnt == null) { m.put(c, 1); } else { m.put(c, ++cnt); } } return m; }} 复杂度 time:O(n) space:O() approach 3算法相当自建hash 12345678910111213141516public boolean isAnagram(String s, String t) { if (s.length() != t.length()) { return false; } int[] counter = new int[26]; for (int i = 0; i &lt; s.length(); i++) { counter[s.charAt(i) - &apos;a&apos;]++; counter[t.charAt(i) - &apos;a&apos;]--; } for (int count : counter) { if (count != 0) { return false; } } return true;} 复杂度 time:O() space:O()","link":"/2019/07/11/leetcode-242-Valid-Anagram/"},{"title":"32.N皇后问题：leetcode51","text":"problemGiven an integer n, return all distinct solutions to the n-queens puzzle. Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively. 1234567891011121314Example:Input: 4Output: [ [&quot;.Q..&quot;, // Solution 1 &quot;...Q&quot;, &quot;Q...&quot;, &quot;..Q.&quot;], [&quot;..Q.&quot;, // Solution 2 &quot;Q...&quot;, &quot;...Q&quot;, &quot;.Q..&quot;]] approach112345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class Solution { public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) { List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;(); helper(res, new int[n], 0); return res; } private void helper(List&lt;List&lt;String&gt;&gt; res, int[] queens, int pos) { if (pos == queens.length) { addResult(res, queens); return; } for (int i = 0; i &lt; queens.length; i++) { queens[pos] = i; if (isValid(pos, queens)) { helper(res, queens, pos + 1); } } } private boolean isValid(int pos, int[] queens) { for (int i = 0; i &lt; pos; i++) { if (queens[i] == queens[pos]) { return false; } else if (Math.abs(queens[pos] - queens[i]) == Math.abs(i - pos)) { return false; } } return true; } private void addResult(List&lt;List&lt;String&gt;&gt; res, int[] queens) { List&lt;String&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; queens.length; i++) { StringBuilder sb = new StringBuilder(); for (int j = 0; j &lt; queens.length; j++) { if (j == queens[i]) { sb.append(\"Q\"); } else { sb.append(\".\"); } } list.add(sb.toString()); } res.add(list); }} time:O(n^2) space:O(n) approach212 time:O() space:O() approach312 time:O() space:O() summery","link":"/2019/09/18/32-N皇后问题：leetcode51/"},{"title":"算法复杂度","text":"时间复杂度 O(1) 123int i = 8;int j = 6;int sum = i + j; O(logn)、O(nlogn) 1234i=1;while (i &lt;= n) { i = i * 2;} O(m+n)、O(m*n) 代码的复杂度由两个数据的规模来决定，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m) * T2(n) = O(f(m) * f(n))。 空间复杂度1234567891011void print(int n) { int i = 0; int[] a = new int[n]; for (i; i &lt;n; ++i) { a[i] = i * i; } for (i = n-1; i &gt;= 0; --i) { print out a[i] }} 我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。常见的空间复杂度就是 O(1)、O(n)、O(n2 )。 总结","link":"/2019/07/09/算法复杂度/"}],"tags":[{"name":"tree","slug":"tree","link":"/tags/tree/"},{"name":"BST","slug":"BST","link":"/tags/BST/"},{"name":"greedy","slug":"greedy","link":"/tags/greedy/"},{"name":"binary-search","slug":"binary-search","link":"/tags/binary-search/"},{"name":"DFS","slug":"DFS","link":"/tags/DFS/"},{"name":"backtracking","slug":"backtracking","link":"/tags/backtracking/"},{"name":"链表","slug":"链表","link":"/tags/链表/"},{"name":"栈","slug":"栈","link":"/tags/栈/"},{"name":"stack","slug":"stack","link":"/tags/stack/"},{"name":"queue","slug":"queue","link":"/tags/queue/"},{"name":"map","slug":"map","link":"/tags/map/"},{"name":"array","slug":"array","link":"/tags/array/"},{"name":"two-pointers","slug":"two-pointers","link":"/tags/two-pointers/"},{"name":"notbest","slug":"notbest","link":"/tags/notbest/"},{"name":"priorityQueue","slug":"priorityQueue","link":"/tags/priorityQueue/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"dequeue","slug":"dequeue","link":"/tags/dequeue/"},{"name":"linux","slug":"linux","link":"/tags/linux/"}],"categories":[{"name":"算法","slug":"算法","link":"/categories/算法/"},{"name":"leetcode","slug":"leetcode","link":"/categories/leetcode/"},{"name":"待补充","slug":"待补充","link":"/categories/待补充/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"总结","slug":"总结","link":"/categories/总结/"}]}